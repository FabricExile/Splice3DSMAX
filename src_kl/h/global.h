#ifndef __KL2EDK_AUTOGEN_global__
#define __KL2EDK_AUTOGEN_global__

#ifdef KL2EDK_INCLUDE_MESSAGES
  #pragma message ( "Including 'global.h'" )
#endif

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by kl2edk version 2.3.0
////////////////////////////////////////////////////////////////

#include <FabricEDK.h>
#if FABRIC_EDK_VERSION_MAJ != 2 || FABRIC_EDK_VERSION_MIN != 3
# error "This file needs to be rebuilt for the current EDK version!"
#endif

// Dependencies on other extensions
#define FABRIC_EDK_EXT_Math_DEPENDENT_EXTS \
  { \
    { 0, 0, 0, 0, 0 } \
  }

// forward declarations
namespace Fabric { namespace EDK { namespace KL {
  class Object;
  struct ARGB;
  struct Box2;
  struct Box3;
  struct Color;
  struct Complex;
  struct Complex_d;
  struct Euler;
  struct Euler_d;
  struct Euler_i;
  struct Mat;
  struct Mat22;
  struct Mat22_c;
  struct Mat22_cd;
  struct Mat22_d;
  struct Mat22_i;
  struct Mat33;
  struct Mat33_c;
  struct Mat33_cd;
  struct Mat33_d;
  struct Mat33_i;
  struct Mat44;
  struct Mat44_c;
  struct Mat44_cd;
  struct Mat44_d;
  struct Mat44_i;
  struct Mat_c;
  struct Mat_cd;
  struct Mat_d;
  struct Mat_i;
  struct Quat;
  struct Quat_d;
  struct Quat_i;
  struct RGB;
  struct RGBA;
  struct Ray;
  struct RotationOrder;
  struct Vec;
  struct Vec2;
  struct Vec2_c;
  struct Vec2_cd;
  struct Vec2_d;
  struct Vec2_i;
  struct Vec3;
  struct Vec3_c;
  struct Vec3_cd;
  struct Vec3_d;
  struct Vec3_i;
  struct Vec4;
  struct Vec4_c;
  struct Vec4_cd;
  struct Vec4_d;
  struct Vec4_i;
  struct Vec_c;
  struct Vec_cd;
  struct Vec_d;
  struct Vec_i;
  struct Xfo;
}}}

#include "aliases.h"

namespace Fabric { namespace EDK { namespace KL {

// KL interface 'Object'
// Defined at (internal)

class Object
{
public:
  
  struct VTable
  {
  };
  
  struct Bits
  {
    ObjectCore *objectCorePtr;
    SwapPtr<VTable const> const *vTableSwapPtrPtr;
  } *m_bits;
  
protected:
  
  friend struct Traits< Object >;
  
  static void ConstructEmpty( Object *self )
  {
    self->m_bits = 0;
  }
  
  static void ConstructCopy( Object *self, Object const *other )
  {
    if ( (self->m_bits = other->m_bits) )
      AtomicUInt32Increment( &self->m_bits->objectCorePtr->refCount );
  }
  
  static void AssignCopy( Object *self, Object const *other )
  {
    if ( self->m_bits != other->m_bits )
    {
      Destruct( self );
      ConstructCopy( self, other );
    }
  }
  
  static void Destruct( Object *self )
  {
    if ( self->m_bits
      && AtomicUInt32DecrementAndGetValue( &self->m_bits->objectCorePtr->refCount ) == 0 )
    {
      self->m_bits->objectCorePtr->lTableSwapPtrPtr->get()->lifecycleDestroy(
        &self->m_bits->objectCorePtr
        );
    }
  }
  
public: 
  
  typedef Object &Result;
  typedef Object const &INParam;
  typedef Object &IOParam;
  typedef Object &OUTParam;
  
  Object()
  {
    ConstructEmpty( this );
  }
  
  Object( Object const &that )
  {
    ConstructCopy( this, &that );
  }
  
  Object &operator =( Object const &that )
  {
    AssignCopy( this, &that );
    return *this;
  }
  
  ~Object()
  {
    Destruct( this );
  }
  
  void appendDesc( String::IOParam string ) const
  {
    if ( m_bits )
      m_bits->objectCorePtr->lTableSwapPtrPtr->get()->appendDesc( &m_bits->objectCorePtr, string );
    else string.append( "null", 4 );
  }
  
  bool isValid() const
  {
    return !!m_bits;
  }
  
  operator bool() const
  {
    return isValid();
  }
  
  bool operator !() const
  {
    return !isValid();
  }
  
  bool operator ==( INParam that )
  {
    return m_bits == that.m_bits;
  }
  
  bool operator !=( INParam that )
  {
    return m_bits != that.m_bits;
  }
  
};

template<>
struct Traits< Object >
{
  typedef Object &Result;
  typedef Object const &INParam;
  typedef Object &IOParam;
  typedef Object &OUTParam;
  
  static void ConstructEmpty( Object &val );
  static void ConstructCopy( Object &lhs, Object const &rhs );
  static void AssignCopy( Object &lhs, Object const &rhs );
  static void Destruct( Object &val );
};

inline void Traits<Object>::ConstructEmpty( Object &val )
{
  Object::ConstructEmpty( &val );
}
inline void Traits<Object>::ConstructCopy( Object &lhs, Object const &rhs )
{
  Object::ConstructCopy( &lhs, &rhs );
}
inline void Traits<Object>::AssignCopy( Object &lhs, Object const &rhs )
{
  Object::AssignCopy( &lhs, &rhs );
}
inline void Traits<Object>::Destruct( Object &val )
{
  Object::Destruct( &val );
}

template<>
struct Traits< RGBA >
{
  typedef RGBA &Result;
  typedef RGBA const &INParam;
  typedef RGBA &IOParam;
  typedef RGBA &OUTParam;
  
  static void ConstructEmpty( RGBA &val );
  static void ConstructCopy( RGBA &lhs, RGBA const &rhs );
  static void AssignCopy( RGBA &lhs, RGBA const &rhs );
  static void Destruct( RGBA &val );
};

template<>
struct Traits< Color >
{
  typedef Color &Result;
  typedef Color const &INParam;
  typedef Color &IOParam;
  typedef Color &OUTParam;
  
  static void ConstructEmpty( Color &val );
  static void ConstructCopy( Color &lhs, Color const &rhs );
  static void AssignCopy( Color &lhs, Color const &rhs );
  static void Destruct( Color &val );
};

template<>
struct Traits< RGB >
{
  typedef RGB &Result;
  typedef RGB const &INParam;
  typedef RGB &IOParam;
  typedef RGB &OUTParam;
  
  static void ConstructEmpty( RGB &val );
  static void ConstructCopy( RGB &lhs, RGB const &rhs );
  static void AssignCopy( RGB &lhs, RGB const &rhs );
  static void Destruct( RGB &val );
};

template<>
struct Traits< ARGB >
{
  typedef ARGB &Result;
  typedef ARGB const &INParam;
  typedef ARGB &IOParam;
  typedef ARGB &OUTParam;
  
  static void ConstructEmpty( ARGB &val );
  static void ConstructCopy( ARGB &lhs, ARGB const &rhs );
  static void AssignCopy( ARGB &lhs, ARGB const &rhs );
  static void Destruct( ARGB &val );
};

template<>
struct Traits< Complex >
{
  typedef Complex &Result;
  typedef Complex const &INParam;
  typedef Complex &IOParam;
  typedef Complex &OUTParam;
  
  static void ConstructEmpty( Complex &val );
  static void ConstructCopy( Complex &lhs, Complex const &rhs );
  static void AssignCopy( Complex &lhs, Complex const &rhs );
  static void Destruct( Complex &val );
};

template<>
struct Traits< Complex_d >
{
  typedef Complex_d &Result;
  typedef Complex_d const &INParam;
  typedef Complex_d &IOParam;
  typedef Complex_d &OUTParam;
  
  static void ConstructEmpty( Complex_d &val );
  static void ConstructCopy( Complex_d &lhs, Complex_d const &rhs );
  static void AssignCopy( Complex_d &lhs, Complex_d const &rhs );
  static void Destruct( Complex_d &val );
};

template<>
struct Traits< Vec >
{
  typedef Vec &Result;
  typedef Vec const &INParam;
  typedef Vec &IOParam;
  typedef Vec &OUTParam;
  
  static void ConstructEmpty( Vec &val );
  static void ConstructCopy( Vec &lhs, Vec const &rhs );
  static void AssignCopy( Vec &lhs, Vec const &rhs );
  static void Destruct( Vec &val );
};

template<>
struct Traits< Vec_d >
{
  typedef Vec_d &Result;
  typedef Vec_d const &INParam;
  typedef Vec_d &IOParam;
  typedef Vec_d &OUTParam;
  
  static void ConstructEmpty( Vec_d &val );
  static void ConstructCopy( Vec_d &lhs, Vec_d const &rhs );
  static void AssignCopy( Vec_d &lhs, Vec_d const &rhs );
  static void Destruct( Vec_d &val );
};

template<>
struct Traits< Vec_i >
{
  typedef Vec_i &Result;
  typedef Vec_i const &INParam;
  typedef Vec_i &IOParam;
  typedef Vec_i &OUTParam;
  
  static void ConstructEmpty( Vec_i &val );
  static void ConstructCopy( Vec_i &lhs, Vec_i const &rhs );
  static void AssignCopy( Vec_i &lhs, Vec_i const &rhs );
  static void Destruct( Vec_i &val );
};

template<>
struct Traits< Vec_c >
{
  typedef Vec_c &Result;
  typedef Vec_c const &INParam;
  typedef Vec_c &IOParam;
  typedef Vec_c &OUTParam;
  
  static void ConstructEmpty( Vec_c &val );
  static void ConstructCopy( Vec_c &lhs, Vec_c const &rhs );
  static void AssignCopy( Vec_c &lhs, Vec_c const &rhs );
  static void Destruct( Vec_c &val );
};

template<>
struct Traits< Vec_cd >
{
  typedef Vec_cd &Result;
  typedef Vec_cd const &INParam;
  typedef Vec_cd &IOParam;
  typedef Vec_cd &OUTParam;
  
  static void ConstructEmpty( Vec_cd &val );
  static void ConstructCopy( Vec_cd &lhs, Vec_cd const &rhs );
  static void AssignCopy( Vec_cd &lhs, Vec_cd const &rhs );
  static void Destruct( Vec_cd &val );
};

template<>
struct Traits< Vec2 >
{
  typedef Vec2 &Result;
  typedef Vec2 const &INParam;
  typedef Vec2 &IOParam;
  typedef Vec2 &OUTParam;
  
  static void ConstructEmpty( Vec2 &val );
  static void ConstructCopy( Vec2 &lhs, Vec2 const &rhs );
  static void AssignCopy( Vec2 &lhs, Vec2 const &rhs );
  static void Destruct( Vec2 &val );
};

template<>
struct Traits< Vec2_d >
{
  typedef Vec2_d &Result;
  typedef Vec2_d const &INParam;
  typedef Vec2_d &IOParam;
  typedef Vec2_d &OUTParam;
  
  static void ConstructEmpty( Vec2_d &val );
  static void ConstructCopy( Vec2_d &lhs, Vec2_d const &rhs );
  static void AssignCopy( Vec2_d &lhs, Vec2_d const &rhs );
  static void Destruct( Vec2_d &val );
};

template<>
struct Traits< Vec2_i >
{
  typedef Vec2_i &Result;
  typedef Vec2_i const &INParam;
  typedef Vec2_i &IOParam;
  typedef Vec2_i &OUTParam;
  
  static void ConstructEmpty( Vec2_i &val );
  static void ConstructCopy( Vec2_i &lhs, Vec2_i const &rhs );
  static void AssignCopy( Vec2_i &lhs, Vec2_i const &rhs );
  static void Destruct( Vec2_i &val );
};

template<>
struct Traits< Vec2_c >
{
  typedef Vec2_c &Result;
  typedef Vec2_c const &INParam;
  typedef Vec2_c &IOParam;
  typedef Vec2_c &OUTParam;
  
  static void ConstructEmpty( Vec2_c &val );
  static void ConstructCopy( Vec2_c &lhs, Vec2_c const &rhs );
  static void AssignCopy( Vec2_c &lhs, Vec2_c const &rhs );
  static void Destruct( Vec2_c &val );
};

template<>
struct Traits< Vec2_cd >
{
  typedef Vec2_cd &Result;
  typedef Vec2_cd const &INParam;
  typedef Vec2_cd &IOParam;
  typedef Vec2_cd &OUTParam;
  
  static void ConstructEmpty( Vec2_cd &val );
  static void ConstructCopy( Vec2_cd &lhs, Vec2_cd const &rhs );
  static void AssignCopy( Vec2_cd &lhs, Vec2_cd const &rhs );
  static void Destruct( Vec2_cd &val );
};

template<>
struct Traits< Vec3 >
{
  typedef Vec3 &Result;
  typedef Vec3 const &INParam;
  typedef Vec3 &IOParam;
  typedef Vec3 &OUTParam;
  
  static void ConstructEmpty( Vec3 &val );
  static void ConstructCopy( Vec3 &lhs, Vec3 const &rhs );
  static void AssignCopy( Vec3 &lhs, Vec3 const &rhs );
  static void Destruct( Vec3 &val );
};

template<>
struct Traits< Vec3_d >
{
  typedef Vec3_d &Result;
  typedef Vec3_d const &INParam;
  typedef Vec3_d &IOParam;
  typedef Vec3_d &OUTParam;
  
  static void ConstructEmpty( Vec3_d &val );
  static void ConstructCopy( Vec3_d &lhs, Vec3_d const &rhs );
  static void AssignCopy( Vec3_d &lhs, Vec3_d const &rhs );
  static void Destruct( Vec3_d &val );
};

template<>
struct Traits< Vec3_i >
{
  typedef Vec3_i &Result;
  typedef Vec3_i const &INParam;
  typedef Vec3_i &IOParam;
  typedef Vec3_i &OUTParam;
  
  static void ConstructEmpty( Vec3_i &val );
  static void ConstructCopy( Vec3_i &lhs, Vec3_i const &rhs );
  static void AssignCopy( Vec3_i &lhs, Vec3_i const &rhs );
  static void Destruct( Vec3_i &val );
};

template<>
struct Traits< Vec3_c >
{
  typedef Vec3_c &Result;
  typedef Vec3_c const &INParam;
  typedef Vec3_c &IOParam;
  typedef Vec3_c &OUTParam;
  
  static void ConstructEmpty( Vec3_c &val );
  static void ConstructCopy( Vec3_c &lhs, Vec3_c const &rhs );
  static void AssignCopy( Vec3_c &lhs, Vec3_c const &rhs );
  static void Destruct( Vec3_c &val );
};

template<>
struct Traits< Vec3_cd >
{
  typedef Vec3_cd &Result;
  typedef Vec3_cd const &INParam;
  typedef Vec3_cd &IOParam;
  typedef Vec3_cd &OUTParam;
  
  static void ConstructEmpty( Vec3_cd &val );
  static void ConstructCopy( Vec3_cd &lhs, Vec3_cd const &rhs );
  static void AssignCopy( Vec3_cd &lhs, Vec3_cd const &rhs );
  static void Destruct( Vec3_cd &val );
};

template<>
struct Traits< Vec4 >
{
  typedef Vec4 &Result;
  typedef Vec4 const &INParam;
  typedef Vec4 &IOParam;
  typedef Vec4 &OUTParam;
  
  static void ConstructEmpty( Vec4 &val );
  static void ConstructCopy( Vec4 &lhs, Vec4 const &rhs );
  static void AssignCopy( Vec4 &lhs, Vec4 const &rhs );
  static void Destruct( Vec4 &val );
};

template<>
struct Traits< Vec4_d >
{
  typedef Vec4_d &Result;
  typedef Vec4_d const &INParam;
  typedef Vec4_d &IOParam;
  typedef Vec4_d &OUTParam;
  
  static void ConstructEmpty( Vec4_d &val );
  static void ConstructCopy( Vec4_d &lhs, Vec4_d const &rhs );
  static void AssignCopy( Vec4_d &lhs, Vec4_d const &rhs );
  static void Destruct( Vec4_d &val );
};

template<>
struct Traits< Vec4_i >
{
  typedef Vec4_i &Result;
  typedef Vec4_i const &INParam;
  typedef Vec4_i &IOParam;
  typedef Vec4_i &OUTParam;
  
  static void ConstructEmpty( Vec4_i &val );
  static void ConstructCopy( Vec4_i &lhs, Vec4_i const &rhs );
  static void AssignCopy( Vec4_i &lhs, Vec4_i const &rhs );
  static void Destruct( Vec4_i &val );
};

template<>
struct Traits< Vec4_c >
{
  typedef Vec4_c &Result;
  typedef Vec4_c const &INParam;
  typedef Vec4_c &IOParam;
  typedef Vec4_c &OUTParam;
  
  static void ConstructEmpty( Vec4_c &val );
  static void ConstructCopy( Vec4_c &lhs, Vec4_c const &rhs );
  static void AssignCopy( Vec4_c &lhs, Vec4_c const &rhs );
  static void Destruct( Vec4_c &val );
};

template<>
struct Traits< Vec4_cd >
{
  typedef Vec4_cd &Result;
  typedef Vec4_cd const &INParam;
  typedef Vec4_cd &IOParam;
  typedef Vec4_cd &OUTParam;
  
  static void ConstructEmpty( Vec4_cd &val );
  static void ConstructCopy( Vec4_cd &lhs, Vec4_cd const &rhs );
  static void AssignCopy( Vec4_cd &lhs, Vec4_cd const &rhs );
  static void Destruct( Vec4_cd &val );
};

template<>
struct Traits< Ray >
{
  typedef Ray &Result;
  typedef Ray const &INParam;
  typedef Ray &IOParam;
  typedef Ray &OUTParam;
  
  static void ConstructEmpty( Ray &val );
  static void ConstructCopy( Ray &lhs, Ray const &rhs );
  static void AssignCopy( Ray &lhs, Ray const &rhs );
  static void Destruct( Ray &val );
};

template<>
struct Traits< Mat >
{
  typedef Mat &Result;
  typedef Mat const &INParam;
  typedef Mat &IOParam;
  typedef Mat &OUTParam;
  
  static void ConstructEmpty( Mat &val );
  static void ConstructCopy( Mat &lhs, Mat const &rhs );
  static void AssignCopy( Mat &lhs, Mat const &rhs );
  static void Destruct( Mat &val );
};

template<>
struct Traits< Mat_d >
{
  typedef Mat_d &Result;
  typedef Mat_d const &INParam;
  typedef Mat_d &IOParam;
  typedef Mat_d &OUTParam;
  
  static void ConstructEmpty( Mat_d &val );
  static void ConstructCopy( Mat_d &lhs, Mat_d const &rhs );
  static void AssignCopy( Mat_d &lhs, Mat_d const &rhs );
  static void Destruct( Mat_d &val );
};

template<>
struct Traits< Mat_i >
{
  typedef Mat_i &Result;
  typedef Mat_i const &INParam;
  typedef Mat_i &IOParam;
  typedef Mat_i &OUTParam;
  
  static void ConstructEmpty( Mat_i &val );
  static void ConstructCopy( Mat_i &lhs, Mat_i const &rhs );
  static void AssignCopy( Mat_i &lhs, Mat_i const &rhs );
  static void Destruct( Mat_i &val );
};

template<>
struct Traits< Mat_c >
{
  typedef Mat_c &Result;
  typedef Mat_c const &INParam;
  typedef Mat_c &IOParam;
  typedef Mat_c &OUTParam;
  
  static void ConstructEmpty( Mat_c &val );
  static void ConstructCopy( Mat_c &lhs, Mat_c const &rhs );
  static void AssignCopy( Mat_c &lhs, Mat_c const &rhs );
  static void Destruct( Mat_c &val );
};

template<>
struct Traits< Mat_cd >
{
  typedef Mat_cd &Result;
  typedef Mat_cd const &INParam;
  typedef Mat_cd &IOParam;
  typedef Mat_cd &OUTParam;
  
  static void ConstructEmpty( Mat_cd &val );
  static void ConstructCopy( Mat_cd &lhs, Mat_cd const &rhs );
  static void AssignCopy( Mat_cd &lhs, Mat_cd const &rhs );
  static void Destruct( Mat_cd &val );
};

template<>
struct Traits< Mat22 >
{
  typedef Mat22 &Result;
  typedef Mat22 const &INParam;
  typedef Mat22 &IOParam;
  typedef Mat22 &OUTParam;
  
  static void ConstructEmpty( Mat22 &val );
  static void ConstructCopy( Mat22 &lhs, Mat22 const &rhs );
  static void AssignCopy( Mat22 &lhs, Mat22 const &rhs );
  static void Destruct( Mat22 &val );
};

template<>
struct Traits< Mat22_d >
{
  typedef Mat22_d &Result;
  typedef Mat22_d const &INParam;
  typedef Mat22_d &IOParam;
  typedef Mat22_d &OUTParam;
  
  static void ConstructEmpty( Mat22_d &val );
  static void ConstructCopy( Mat22_d &lhs, Mat22_d const &rhs );
  static void AssignCopy( Mat22_d &lhs, Mat22_d const &rhs );
  static void Destruct( Mat22_d &val );
};

template<>
struct Traits< Mat22_i >
{
  typedef Mat22_i &Result;
  typedef Mat22_i const &INParam;
  typedef Mat22_i &IOParam;
  typedef Mat22_i &OUTParam;
  
  static void ConstructEmpty( Mat22_i &val );
  static void ConstructCopy( Mat22_i &lhs, Mat22_i const &rhs );
  static void AssignCopy( Mat22_i &lhs, Mat22_i const &rhs );
  static void Destruct( Mat22_i &val );
};

template<>
struct Traits< Mat22_c >
{
  typedef Mat22_c &Result;
  typedef Mat22_c const &INParam;
  typedef Mat22_c &IOParam;
  typedef Mat22_c &OUTParam;
  
  static void ConstructEmpty( Mat22_c &val );
  static void ConstructCopy( Mat22_c &lhs, Mat22_c const &rhs );
  static void AssignCopy( Mat22_c &lhs, Mat22_c const &rhs );
  static void Destruct( Mat22_c &val );
};

template<>
struct Traits< Mat22_cd >
{
  typedef Mat22_cd &Result;
  typedef Mat22_cd const &INParam;
  typedef Mat22_cd &IOParam;
  typedef Mat22_cd &OUTParam;
  
  static void ConstructEmpty( Mat22_cd &val );
  static void ConstructCopy( Mat22_cd &lhs, Mat22_cd const &rhs );
  static void AssignCopy( Mat22_cd &lhs, Mat22_cd const &rhs );
  static void Destruct( Mat22_cd &val );
};

template<>
struct Traits< Quat >
{
  typedef Quat &Result;
  typedef Quat const &INParam;
  typedef Quat &IOParam;
  typedef Quat &OUTParam;
  
  static void ConstructEmpty( Quat &val );
  static void ConstructCopy( Quat &lhs, Quat const &rhs );
  static void AssignCopy( Quat &lhs, Quat const &rhs );
  static void Destruct( Quat &val );
};

template<>
struct Traits< Mat33 >
{
  typedef Mat33 &Result;
  typedef Mat33 const &INParam;
  typedef Mat33 &IOParam;
  typedef Mat33 &OUTParam;
  
  static void ConstructEmpty( Mat33 &val );
  static void ConstructCopy( Mat33 &lhs, Mat33 const &rhs );
  static void AssignCopy( Mat33 &lhs, Mat33 const &rhs );
  static void Destruct( Mat33 &val );
};

template<>
struct Traits< Quat_d >
{
  typedef Quat_d &Result;
  typedef Quat_d const &INParam;
  typedef Quat_d &IOParam;
  typedef Quat_d &OUTParam;
  
  static void ConstructEmpty( Quat_d &val );
  static void ConstructCopy( Quat_d &lhs, Quat_d const &rhs );
  static void AssignCopy( Quat_d &lhs, Quat_d const &rhs );
  static void Destruct( Quat_d &val );
};

template<>
struct Traits< Mat33_d >
{
  typedef Mat33_d &Result;
  typedef Mat33_d const &INParam;
  typedef Mat33_d &IOParam;
  typedef Mat33_d &OUTParam;
  
  static void ConstructEmpty( Mat33_d &val );
  static void ConstructCopy( Mat33_d &lhs, Mat33_d const &rhs );
  static void AssignCopy( Mat33_d &lhs, Mat33_d const &rhs );
  static void Destruct( Mat33_d &val );
};

template<>
struct Traits< Quat_i >
{
  typedef Quat_i &Result;
  typedef Quat_i const &INParam;
  typedef Quat_i &IOParam;
  typedef Quat_i &OUTParam;
  
  static void ConstructEmpty( Quat_i &val );
  static void ConstructCopy( Quat_i &lhs, Quat_i const &rhs );
  static void AssignCopy( Quat_i &lhs, Quat_i const &rhs );
  static void Destruct( Quat_i &val );
};

template<>
struct Traits< Mat33_i >
{
  typedef Mat33_i &Result;
  typedef Mat33_i const &INParam;
  typedef Mat33_i &IOParam;
  typedef Mat33_i &OUTParam;
  
  static void ConstructEmpty( Mat33_i &val );
  static void ConstructCopy( Mat33_i &lhs, Mat33_i const &rhs );
  static void AssignCopy( Mat33_i &lhs, Mat33_i const &rhs );
  static void Destruct( Mat33_i &val );
};

template<>
struct Traits< Mat33_c >
{
  typedef Mat33_c &Result;
  typedef Mat33_c const &INParam;
  typedef Mat33_c &IOParam;
  typedef Mat33_c &OUTParam;
  
  static void ConstructEmpty( Mat33_c &val );
  static void ConstructCopy( Mat33_c &lhs, Mat33_c const &rhs );
  static void AssignCopy( Mat33_c &lhs, Mat33_c const &rhs );
  static void Destruct( Mat33_c &val );
};

template<>
struct Traits< Mat33_cd >
{
  typedef Mat33_cd &Result;
  typedef Mat33_cd const &INParam;
  typedef Mat33_cd &IOParam;
  typedef Mat33_cd &OUTParam;
  
  static void ConstructEmpty( Mat33_cd &val );
  static void ConstructCopy( Mat33_cd &lhs, Mat33_cd const &rhs );
  static void AssignCopy( Mat33_cd &lhs, Mat33_cd const &rhs );
  static void Destruct( Mat33_cd &val );
};

template<>
struct Traits< Mat44 >
{
  typedef Mat44 &Result;
  typedef Mat44 const &INParam;
  typedef Mat44 &IOParam;
  typedef Mat44 &OUTParam;
  
  static void ConstructEmpty( Mat44 &val );
  static void ConstructCopy( Mat44 &lhs, Mat44 const &rhs );
  static void AssignCopy( Mat44 &lhs, Mat44 const &rhs );
  static void Destruct( Mat44 &val );
};

template<>
struct Traits< Mat44_d >
{
  typedef Mat44_d &Result;
  typedef Mat44_d const &INParam;
  typedef Mat44_d &IOParam;
  typedef Mat44_d &OUTParam;
  
  static void ConstructEmpty( Mat44_d &val );
  static void ConstructCopy( Mat44_d &lhs, Mat44_d const &rhs );
  static void AssignCopy( Mat44_d &lhs, Mat44_d const &rhs );
  static void Destruct( Mat44_d &val );
};

template<>
struct Traits< Mat44_i >
{
  typedef Mat44_i &Result;
  typedef Mat44_i const &INParam;
  typedef Mat44_i &IOParam;
  typedef Mat44_i &OUTParam;
  
  static void ConstructEmpty( Mat44_i &val );
  static void ConstructCopy( Mat44_i &lhs, Mat44_i const &rhs );
  static void AssignCopy( Mat44_i &lhs, Mat44_i const &rhs );
  static void Destruct( Mat44_i &val );
};

template<>
struct Traits< Mat44_c >
{
  typedef Mat44_c &Result;
  typedef Mat44_c const &INParam;
  typedef Mat44_c &IOParam;
  typedef Mat44_c &OUTParam;
  
  static void ConstructEmpty( Mat44_c &val );
  static void ConstructCopy( Mat44_c &lhs, Mat44_c const &rhs );
  static void AssignCopy( Mat44_c &lhs, Mat44_c const &rhs );
  static void Destruct( Mat44_c &val );
};

template<>
struct Traits< Mat44_cd >
{
  typedef Mat44_cd &Result;
  typedef Mat44_cd const &INParam;
  typedef Mat44_cd &IOParam;
  typedef Mat44_cd &OUTParam;
  
  static void ConstructEmpty( Mat44_cd &val );
  static void ConstructCopy( Mat44_cd &lhs, Mat44_cd const &rhs );
  static void AssignCopy( Mat44_cd &lhs, Mat44_cd const &rhs );
  static void Destruct( Mat44_cd &val );
};

template<>
struct Traits< Box2 >
{
  typedef Box2 &Result;
  typedef Box2 const &INParam;
  typedef Box2 &IOParam;
  typedef Box2 &OUTParam;
  
  static void ConstructEmpty( Box2 &val );
  static void ConstructCopy( Box2 &lhs, Box2 const &rhs );
  static void AssignCopy( Box2 &lhs, Box2 const &rhs );
  static void Destruct( Box2 &val );
};

template<>
struct Traits< Box3 >
{
  typedef Box3 &Result;
  typedef Box3 const &INParam;
  typedef Box3 &IOParam;
  typedef Box3 &OUTParam;
  
  static void ConstructEmpty( Box3 &val );
  static void ConstructCopy( Box3 &lhs, Box3 const &rhs );
  static void AssignCopy( Box3 &lhs, Box3 const &rhs );
  static void Destruct( Box3 &val );
};

template<>
struct Traits< RotationOrder >
{
  typedef RotationOrder &Result;
  typedef RotationOrder const &INParam;
  typedef RotationOrder &IOParam;
  typedef RotationOrder &OUTParam;
  
  static void ConstructEmpty( RotationOrder &val );
  static void ConstructCopy( RotationOrder &lhs, RotationOrder const &rhs );
  static void AssignCopy( RotationOrder &lhs, RotationOrder const &rhs );
  static void Destruct( RotationOrder &val );
};

template<>
struct Traits< Euler >
{
  typedef Euler &Result;
  typedef Euler const &INParam;
  typedef Euler &IOParam;
  typedef Euler &OUTParam;
  
  static void ConstructEmpty( Euler &val );
  static void ConstructCopy( Euler &lhs, Euler const &rhs );
  static void AssignCopy( Euler &lhs, Euler const &rhs );
  static void Destruct( Euler &val );
};

template<>
struct Traits< Euler_d >
{
  typedef Euler_d &Result;
  typedef Euler_d const &INParam;
  typedef Euler_d &IOParam;
  typedef Euler_d &OUTParam;
  
  static void ConstructEmpty( Euler_d &val );
  static void ConstructCopy( Euler_d &lhs, Euler_d const &rhs );
  static void AssignCopy( Euler_d &lhs, Euler_d const &rhs );
  static void Destruct( Euler_d &val );
};

template<>
struct Traits< Euler_i >
{
  typedef Euler_i &Result;
  typedef Euler_i const &INParam;
  typedef Euler_i &IOParam;
  typedef Euler_i &OUTParam;
  
  static void ConstructEmpty( Euler_i &val );
  static void ConstructCopy( Euler_i &lhs, Euler_i const &rhs );
  static void AssignCopy( Euler_i &lhs, Euler_i const &rhs );
  static void Destruct( Euler_i &val );
};

template<>
struct Traits< Xfo >
{
  typedef Xfo &Result;
  typedef Xfo const &INParam;
  typedef Xfo &IOParam;
  typedef Xfo &OUTParam;
  
  static void ConstructEmpty( Xfo &val );
  static void ConstructCopy( Xfo &lhs, Xfo const &rhs );
  static void AssignCopy( Xfo &lhs, Xfo const &rhs );
  static void Destruct( Xfo &val );
};

}}}

#endif // __KL2EDK_AUTOGEN_global__

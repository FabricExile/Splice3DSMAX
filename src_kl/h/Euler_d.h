#pragma once

#ifdef KL2EDK_INCLUDE_MESSAGES
  #pragma message ( "Including 'Euler_d.h'" )
#endif

////////////////////////////////////////////////////////////////
// THIS FILE IS AUTOMATICALLY GENERATED -- DO NOT MODIFY!!
////////////////////////////////////////////////////////////////
// Generated by kl2edk version 2.5.0
////////////////////////////////////////////////////////////////

#include <FabricEDK.h>
#if FABRIC_EDK_VERSION_MAJ != 2 || FABRIC_EDK_VERSION_MIN != 5
# error "This file needs to be rebuilt for the current EDK version!"
#endif

// Core\Clients\CAPI\KL2EDK.cpp:803
#include "global.h"
// Core\Clients\CAPI\KL2EDK.cpp:855
#include "RotationOrder.h"

namespace Fabric {
namespace EDK {
namespace KL {


// KL struct 'Euler_d'
// Defined at Euler_d.kl:22:1

struct Euler_d
{
  typedef Euler_d &Result;
  typedef Euler_d const &INParam;
  typedef Euler_d &IOParam;
  typedef Euler_d &OUTParam;
  
  ::Fabric::EDK::KL::Float64 x;
  ::Fabric::EDK::KL::Float64 y;
  ::Fabric::EDK::KL::Float64 z;
  ::Fabric::EDK::KL::RotationOrder ro;
};

inline void Traits<Euler_d>::ConstructEmpty( Euler_d &val )
{
  Traits< ::Fabric::EDK::KL::Float64 >::ConstructEmpty( val.x );
  Traits< ::Fabric::EDK::KL::Float64 >::ConstructEmpty( val.y );
  Traits< ::Fabric::EDK::KL::Float64 >::ConstructEmpty( val.z );
  Traits< ::Fabric::EDK::KL::RotationOrder >::ConstructEmpty( val.ro );
}
inline void Traits<Euler_d>::ConstructCopy( Euler_d &lhs, Euler_d const &rhs )
{
  Traits< ::Fabric::EDK::KL::Float64 >::ConstructCopy( lhs.x, rhs.x );
  Traits< ::Fabric::EDK::KL::Float64 >::ConstructCopy( lhs.y, rhs.y );
  Traits< ::Fabric::EDK::KL::Float64 >::ConstructCopy( lhs.z, rhs.z );
  Traits< ::Fabric::EDK::KL::RotationOrder >::ConstructCopy( lhs.ro, rhs.ro );
}
inline void Traits<Euler_d>::AssignCopy( Euler_d &lhs, Euler_d const &rhs )
{
  Traits< ::Fabric::EDK::KL::Float64 >::AssignCopy( lhs.x, rhs.x );
  Traits< ::Fabric::EDK::KL::Float64 >::AssignCopy( lhs.y, rhs.y );
  Traits< ::Fabric::EDK::KL::Float64 >::AssignCopy( lhs.z, rhs.z );
  Traits< ::Fabric::EDK::KL::RotationOrder >::AssignCopy( lhs.ro, rhs.ro );
}
inline void Traits<Euler_d>::Destruct( Euler_d &val )
{
  Traits< ::Fabric::EDK::KL::RotationOrder >::Destruct( val.ro );
  Traits< ::Fabric::EDK::KL::Float64 >::Destruct( val.z );
  Traits< ::Fabric::EDK::KL::Float64 >::Destruct( val.y );
  Traits< ::Fabric::EDK::KL::Float64 >::Destruct( val.x );
}
} // namespace KL
} // namespace EDK
} // namespace Fabric


